# Implementation of classic arcade game Pong

import simplegui
import random

# initialize globals - pos and vel encode vertical info for paddles
WIDTH = 600
HEIGHT = 400       
BALL_RADIUS = 20
PAD_WIDTH = 8
PAD_HEIGHT = 80
LEFT = False
RIGHT = True
paddle1_pos = 200
paddle2_pos = 200
paddle1_vel = 0
paddle2_vel = 0
ball_pos = [WIDTH/2,HEIGHT/2]
ball_vel = [5,2]
vel = 0
score1=0
score2=0

# initialize ball_pos and ball_vel for new bal in middle of table
# if direction is RIGHT, the ball's velocity is upper right, else upper left
def spawn_ball(direction):
    global ball_pos, ball_vel # these are vectors stored as lists
    ball_pos = [WIDTH/2,HEIGHT/2]
    if(direction == RIGHT):
        ball_vel[0]=(random.randrange(120, 240))/60
        ball_vel[1]=-(random.randrange(60, 180))/60
        #negative for ball movement to be upward
    if(direction == LEFT):
        ball_vel[0]=-(random.randrange(120, 240))/60
        ball_vel[1]=-(random.randrange(60, 180))/60
        
# define event handlers
def new_game():
    global paddle1_pos, paddle2_pos, paddle1_vel, paddle2_vel  # these are numbers
    global score1, score2  # these are ints
    score1 = 0
    score2 = 0
    spawn_ball(RIGHT)

def restart():
    global ball_pos, ball_vel, paddle1_pos, paddle2_pos, score1, score2,vel
    score1=0
    score2=0 
    paddle1_pos=160
    paddle2_pos=160
    paddle1_vel=0
    paddle2_vel=0
    ball_vel=[0,0]
    vel=0
    new_game()
def draw(canvas):
    global score1, score2, paddle1_pos, paddle2_pos, ball_pos, ball_vel ,paddle1_vel, paddle2_vel
    # draw mid line and gutters
    canvas.draw_line([WIDTH / 2, 0],[WIDTH / 2, HEIGHT], 1, "white")
    canvas.draw_line([PAD_WIDTH, 0],[PAD_WIDTH, HEIGHT], 1, "white")
    canvas.draw_line([WIDTH - PAD_WIDTH, 0],[WIDTH - PAD_WIDTH, HEIGHT], 1, "white")
        
    # update ball
    ball_pos[0] += ball_vel[0]
    ball_pos[1] += ball_vel[1]
    
    # collide and reflect off of top side and bottom side of the canvas
    if ball_pos[1] <= BALL_RADIUS:
        ball_vel[1] = -ball_vel[1]
    elif ball_pos[1] >= (HEIGHT-1)-BALL_RADIUS:
        ball_vel[1] = -ball_vel[1]
    
    # collide and reflect off of left and right hand side of the gutters
    if ball_pos[0] <= PAD_WIDTH + BALL_RADIUS:
        if (ball_pos[1]>= paddle1_pos) and (ball_pos[1] <= (paddle1_pos) + PAD_HEIGHT ):
            ball_vel[0] = -(ball_vel[0]/10 + ball_vel[0])
            ball_vel[1] = ball_vel[1]/10 +  ball_vel[1]
        else:
            score2+=1
            spawn_ball(RIGHT)
            
    if ball_pos[0] >= WIDTH-PAD_WIDTH-BALL_RADIUS:
        if (ball_pos[1]>= paddle2_pos) and (ball_pos[1] <= (paddle2_pos) + PAD_HEIGHT ):
            ball_vel[0] = -(ball_vel[0]/10 + ball_vel[0])
            ball_vel[1] = ball_vel[1]/10 +  ball_vel[1]
        else:
            score1+=1
            spawn_ball(LEFT)
            
    
    # draw ball
    canvas.draw_circle(ball_pos,BALL_RADIUS,2,"black","green")
    
    # update paddle's vertical position, keep paddle on the screen
    if(paddle1_pos + paddle1_vel >=0 and paddle1_pos + PAD_HEIGHT + paddle1_vel <= HEIGHT):
        paddle1_pos += paddle1_vel
    if(paddle2_pos + paddle2_vel >=0 and paddle2_pos + PAD_HEIGHT + paddle2_vel <= HEIGHT):
        paddle2_pos += paddle2_vel
        
    # draw paddles
    canvas.draw_polygon([[0, paddle1_pos],[PAD_WIDTH, paddle1_pos],[PAD_WIDTH, (paddle1_pos) + PAD_HEIGHT ],[0, (paddle1_pos) + PAD_HEIGHT]],1,"green","green") 
    canvas.draw_polygon([[WIDTH, paddle2_pos],[WIDTH - PAD_WIDTH, paddle2_pos],[WIDTH - PAD_WIDTH, paddle2_pos + PAD_HEIGHT], [WIDTH, paddle2_pos + PAD_HEIGHT]],1,"green","green")
    # determine whether paddle and ball collide    
    
    # draw scores
    canvas.draw_text(str(score1), (150, 100), 80, 'green')
    canvas.draw_text(str(score2), (450, 100), 80, 'green')
def keydown(key):
    global paddle1_vel, paddle2_vel,vel
    vel = 6
    if key == simplegui.KEY_MAP["s"]:
        paddle1_vel += vel
    if key == simplegui.KEY_MAP["down"]:
        paddle2_vel += vel
    if key == simplegui.KEY_MAP["up"]:
        paddle2_vel -= vel
    if key == simplegui.KEY_MAP["w"]:
        paddle1_vel -= vel
   
def keyup(key):
    global paddle1_vel, paddle2_vel
    if key == simplegui.KEY_MAP["w"]:
        paddle1_vel = 0
    elif key == simplegui.KEY_MAP["s"]:
        paddle1_vel = 0
    elif key == simplegui.KEY_MAP["up"]:
        paddle2_vel = 0
    elif key == simplegui.KEY_MAP["down"]:
        paddle2_vel = 0
        

# create frame
frame = simplegui.create_frame("Pong", WIDTH, HEIGHT)
frame.set_canvas_background('pink')
frame.set_draw_handler(draw)
frame.set_keydown_handler(keydown)
frame.set_keyup_handler(keyup)
button1 = frame.add_button('Restart', restart)

# start frame
new_game()
frame.start()
